window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "soliton_automata", "modulename": "soliton_automata", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "soliton_automata.gui", "modulename": "soliton_automata.gui", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "soliton_automata.gui.main_window_ba", "modulename": "soliton_automata.gui.main_window_ba", "kind": "module", "doc": "<p>GUI of the software.</p>\n"}, {"fullname": "soliton_automata.gui.main_window_ba.QHLine", "modulename": "soliton_automata.gui.main_window_ba", "qualname": "QHLine", "kind": "class", "doc": "<p>Line Class that defines how separator lines look.</p>\n", "bases": "PyQt5.QtWidgets.QFrame"}, {"fullname": "soliton_automata.gui.main_window_ba.QHLine.__init__", "modulename": "soliton_automata.gui.main_window_ba", "qualname": "QHLine.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">mode</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span>)</span>"}, {"fullname": "soliton_automata.gui.main_window_ba.MainWindow", "modulename": "soliton_automata.gui.main_window_ba", "qualname": "MainWindow", "kind": "class", "doc": "<p>Main Window of the GUI. Inherits from class <code>QMainWindow</code>.</p>\n", "bases": "PyQt5.QtWidgets.QMainWindow"}, {"fullname": "soliton_automata.gui.main_window_ba.MainWindow.__init__", "modulename": "soliton_automata.gui.main_window_ba", "qualname": "MainWindow.__init__", "kind": "function", "doc": "<p>Initializes the main window.\nMain window contains a stacked layout with one window for single soliton case and one window for multi soliton case.\nBoth display a welcoming text and all necessary widgets for the user to specify and submit a soliton graph.\nAll other widgets are hidden for now and are revealed step by step, so user is guided through the use of the application.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "soliton_automata.gui.main_window_ba.MainWindow.central_wid", "modulename": "soliton_automata.gui.main_window_ba", "qualname": "MainWindow.central_wid", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "soliton_automata.gui.main_window_ba.MainWindow.layout_for_wids", "modulename": "soliton_automata.gui.main_window_ba", "qualname": "MainWindow.layout_for_wids", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "soliton_automata.gui.main_window_ba.MainWindow.wid_single", "modulename": "soliton_automata.gui.main_window_ba", "qualname": "MainWindow.wid_single", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "soliton_automata.gui.main_window_ba.MainWindow.gridLayout", "modulename": "soliton_automata.gui.main_window_ba", "qualname": "MainWindow.gridLayout", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "soliton_automata.gui.main_window_ba.MainWindow.display_molecule", "modulename": "soliton_automata.gui.main_window_ba", "qualname": "MainWindow.display_molecule", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "soliton_automata.gui.main_window_ba.MainWindow.qim", "modulename": "soliton_automata.gui.main_window_ba", "qualname": "MainWindow.qim", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "soliton_automata.gui.main_window_ba.MainWindow.change_window_button", "modulename": "soliton_automata.gui.main_window_ba", "qualname": "MainWindow.change_window_button", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "soliton_automata.gui.main_window_ba.MainWindow.mode", "modulename": "soliton_automata.gui.main_window_ba", "qualname": "MainWindow.mode", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "soliton_automata.gui.main_window_ba.MainWindow.row0", "modulename": "soliton_automata.gui.main_window_ba", "qualname": "MainWindow.row0", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "soliton_automata.gui.main_window_ba.MainWindow.minigrid0", "modulename": "soliton_automata.gui.main_window_ba", "qualname": "MainWindow.minigrid0", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "soliton_automata.gui.main_window_ba.MainWindow.show_tips", "modulename": "soliton_automata.gui.main_window_ba", "qualname": "MainWindow.show_tips", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "soliton_automata.gui.main_window_ba.MainWindow.help_button", "modulename": "soliton_automata.gui.main_window_ba", "qualname": "MainWindow.help_button", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "soliton_automata.gui.main_window_ba.MainWindow.short_help", "modulename": "soliton_automata.gui.main_window_ba", "qualname": "MainWindow.short_help", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "soliton_automata.gui.main_window_ba.MainWindow.traversal_mode", "modulename": "soliton_automata.gui.main_window_ba", "qualname": "MainWindow.traversal_mode", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "soliton_automata.gui.main_window_ba.MainWindow.row3", "modulename": "soliton_automata.gui.main_window_ba", "qualname": "MainWindow.row3", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "soliton_automata.gui.main_window_ba.MainWindow.minigrid2", "modulename": "soliton_automata.gui.main_window_ba", "qualname": "MainWindow.minigrid2", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "soliton_automata.gui.main_window_ba.MainWindow.mol_info", "modulename": "soliton_automata.gui.main_window_ba", "qualname": "MainWindow.mol_info", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "soliton_automata.gui.main_window_ba.MainWindow.save", "modulename": "soliton_automata.gui.main_window_ba", "qualname": "MainWindow.save", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "soliton_automata.gui.main_window_ba.MainWindow.molecule_label", "modulename": "soliton_automata.gui.main_window_ba", "qualname": "MainWindow.molecule_label", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "soliton_automata.gui.main_window_ba.MainWindow.row4", "modulename": "soliton_automata.gui.main_window_ba", "qualname": "MainWindow.row4", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "soliton_automata.gui.main_window_ba.MainWindow.minigrid3", "modulename": "soliton_automata.gui.main_window_ba", "qualname": "MainWindow.minigrid3", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "soliton_automata.gui.main_window_ba.MainWindow.molecule_lineedit", "modulename": "soliton_automata.gui.main_window_ba", "qualname": "MainWindow.molecule_lineedit", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "soliton_automata.gui.main_window_ba.MainWindow.submit_molecule", "modulename": "soliton_automata.gui.main_window_ba", "qualname": "MainWindow.submit_molecule", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "soliton_automata.gui.main_window_ba.MainWindow.parting_line1", "modulename": "soliton_automata.gui.main_window_ba", "qualname": "MainWindow.parting_line1", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "soliton_automata.gui.main_window_ba.MainWindow.exterior_nodes_label", "modulename": "soliton_automata.gui.main_window_ba", "qualname": "MainWindow.exterior_nodes_label", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "soliton_automata.gui.main_window_ba.MainWindow.row5", "modulename": "soliton_automata.gui.main_window_ba", "qualname": "MainWindow.row5", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "soliton_automata.gui.main_window_ba.MainWindow.minigrid4", "modulename": "soliton_automata.gui.main_window_ba", "qualname": "MainWindow.minigrid4", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "soliton_automata.gui.main_window_ba.MainWindow.all_exterior_nodes", "modulename": "soliton_automata.gui.main_window_ba", "qualname": "MainWindow.all_exterior_nodes", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "soliton_automata.gui.main_window_ba.MainWindow.node_1", "modulename": "soliton_automata.gui.main_window_ba", "qualname": "MainWindow.node_1", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "soliton_automata.gui.main_window_ba.MainWindow.exterior_nodes_label2", "modulename": "soliton_automata.gui.main_window_ba", "qualname": "MainWindow.exterior_nodes_label2", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "soliton_automata.gui.main_window_ba.MainWindow.node_2", "modulename": "soliton_automata.gui.main_window_ba", "qualname": "MainWindow.node_2", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "soliton_automata.gui.main_window_ba.MainWindow.submit_exterior_nodes", "modulename": "soliton_automata.gui.main_window_ba", "qualname": "MainWindow.submit_exterior_nodes", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "soliton_automata.gui.main_window_ba.MainWindow.parting_line2", "modulename": "soliton_automata.gui.main_window_ba", "qualname": "MainWindow.parting_line2", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "soliton_automata.gui.main_window_ba.MainWindow.soliton_paths_label", "modulename": "soliton_automata.gui.main_window_ba", "qualname": "MainWindow.soliton_paths_label", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "soliton_automata.gui.main_window_ba.MainWindow.row6", "modulename": "soliton_automata.gui.main_window_ba", "qualname": "MainWindow.row6", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "soliton_automata.gui.main_window_ba.MainWindow.minigrid5", "modulename": "soliton_automata.gui.main_window_ba", "qualname": "MainWindow.minigrid5", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "soliton_automata.gui.main_window_ba.MainWindow.paths", "modulename": "soliton_automata.gui.main_window_ba", "qualname": "MainWindow.paths", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "soliton_automata.gui.main_window_ba.MainWindow.show_matrices", "modulename": "soliton_automata.gui.main_window_ba", "qualname": "MainWindow.show_matrices", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "soliton_automata.gui.main_window_ba.MainWindow.show_end_result", "modulename": "soliton_automata.gui.main_window_ba", "qualname": "MainWindow.show_end_result", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "soliton_automata.gui.main_window_ba.MainWindow.show_animation", "modulename": "soliton_automata.gui.main_window_ba", "qualname": "MainWindow.show_animation", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "soliton_automata.gui.main_window_ba.MainWindow.menubar", "modulename": "soliton_automata.gui.main_window_ba", "qualname": "MainWindow.menubar", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "soliton_automata.gui.main_window_ba.MainWindow.status", "modulename": "soliton_automata.gui.main_window_ba", "qualname": "MainWindow.status", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "soliton_automata.gui.main_window_ba.MainWindow.wid_mult", "modulename": "soliton_automata.gui.main_window_ba", "qualname": "MainWindow.wid_mult", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "soliton_automata.gui.main_window_ba.MainWindow.gridLayout_m", "modulename": "soliton_automata.gui.main_window_ba", "qualname": "MainWindow.gridLayout_m", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "soliton_automata.gui.main_window_ba.MainWindow.display_molecule_m", "modulename": "soliton_automata.gui.main_window_ba", "qualname": "MainWindow.display_molecule_m", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "soliton_automata.gui.main_window_ba.MainWindow.qim_m", "modulename": "soliton_automata.gui.main_window_ba", "qualname": "MainWindow.qim_m", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "soliton_automata.gui.main_window_ba.MainWindow.change_window_button_m", "modulename": "soliton_automata.gui.main_window_ba", "qualname": "MainWindow.change_window_button_m", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "soliton_automata.gui.main_window_ba.MainWindow.mode_m", "modulename": "soliton_automata.gui.main_window_ba", "qualname": "MainWindow.mode_m", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "soliton_automata.gui.main_window_ba.MainWindow.row0_m", "modulename": "soliton_automata.gui.main_window_ba", "qualname": "MainWindow.row0_m", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "soliton_automata.gui.main_window_ba.MainWindow.minigrid0_m", "modulename": "soliton_automata.gui.main_window_ba", "qualname": "MainWindow.minigrid0_m", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "soliton_automata.gui.main_window_ba.MainWindow.show_tips_m", "modulename": "soliton_automata.gui.main_window_ba", "qualname": "MainWindow.show_tips_m", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "soliton_automata.gui.main_window_ba.MainWindow.help_button_m", "modulename": "soliton_automata.gui.main_window_ba", "qualname": "MainWindow.help_button_m", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "soliton_automata.gui.main_window_ba.MainWindow.short_help_m", "modulename": "soliton_automata.gui.main_window_ba", "qualname": "MainWindow.short_help_m", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "soliton_automata.gui.main_window_ba.MainWindow.traversal_mode_m", "modulename": "soliton_automata.gui.main_window_ba", "qualname": "MainWindow.traversal_mode_m", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "soliton_automata.gui.main_window_ba.MainWindow.row3_m", "modulename": "soliton_automata.gui.main_window_ba", "qualname": "MainWindow.row3_m", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "soliton_automata.gui.main_window_ba.MainWindow.minigrid2_m", "modulename": "soliton_automata.gui.main_window_ba", "qualname": "MainWindow.minigrid2_m", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "soliton_automata.gui.main_window_ba.MainWindow.mol_info_m", "modulename": "soliton_automata.gui.main_window_ba", "qualname": "MainWindow.mol_info_m", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "soliton_automata.gui.main_window_ba.MainWindow.save_m", "modulename": "soliton_automata.gui.main_window_ba", "qualname": "MainWindow.save_m", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "soliton_automata.gui.main_window_ba.MainWindow.molecule_label_m", "modulename": "soliton_automata.gui.main_window_ba", "qualname": "MainWindow.molecule_label_m", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "soliton_automata.gui.main_window_ba.MainWindow.molecule_lineedit_m", "modulename": "soliton_automata.gui.main_window_ba", "qualname": "MainWindow.molecule_lineedit_m", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "soliton_automata.gui.main_window_ba.MainWindow.submit_molecule_m", "modulename": "soliton_automata.gui.main_window_ba", "qualname": "MainWindow.submit_molecule_m", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "soliton_automata.gui.main_window_ba.MainWindow.parting_line1_m", "modulename": "soliton_automata.gui.main_window_ba", "qualname": "MainWindow.parting_line1_m", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "soliton_automata.gui.main_window_ba.MainWindow.set_of_bursts_label", "modulename": "soliton_automata.gui.main_window_ba", "qualname": "MainWindow.set_of_bursts_label", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "soliton_automata.gui.main_window_ba.MainWindow.row5_m", "modulename": "soliton_automata.gui.main_window_ba", "qualname": "MainWindow.row5_m", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "soliton_automata.gui.main_window_ba.MainWindow.minigrid4_m", "modulename": "soliton_automata.gui.main_window_ba", "qualname": "MainWindow.minigrid4_m", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "soliton_automata.gui.main_window_ba.MainWindow.set_of_bursts_lineedit", "modulename": "soliton_automata.gui.main_window_ba", "qualname": "MainWindow.set_of_bursts_lineedit", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "soliton_automata.gui.main_window_ba.MainWindow.submit_set_of_bursts", "modulename": "soliton_automata.gui.main_window_ba", "qualname": "MainWindow.submit_set_of_bursts", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "soliton_automata.gui.main_window_ba.MainWindow.parting_line2_m", "modulename": "soliton_automata.gui.main_window_ba", "qualname": "MainWindow.parting_line2_m", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "soliton_automata.gui.main_window_ba.MainWindow.bursts_label", "modulename": "soliton_automata.gui.main_window_ba", "qualname": "MainWindow.bursts_label", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "soliton_automata.gui.main_window_ba.MainWindow.row6_m", "modulename": "soliton_automata.gui.main_window_ba", "qualname": "MainWindow.row6_m", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "soliton_automata.gui.main_window_ba.MainWindow.all_bursts", "modulename": "soliton_automata.gui.main_window_ba", "qualname": "MainWindow.all_bursts", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "soliton_automata.gui.main_window_ba.MainWindow.burst", "modulename": "soliton_automata.gui.main_window_ba", "qualname": "MainWindow.burst", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "soliton_automata.gui.main_window_ba.MainWindow.submit_burst", "modulename": "soliton_automata.gui.main_window_ba", "qualname": "MainWindow.submit_burst", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "soliton_automata.gui.main_window_ba.MainWindow.parting_line3_m", "modulename": "soliton_automata.gui.main_window_ba", "qualname": "MainWindow.parting_line3_m", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "soliton_automata.gui.main_window_ba.MainWindow.traversals_label", "modulename": "soliton_automata.gui.main_window_ba", "qualname": "MainWindow.traversals_label", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "soliton_automata.gui.main_window_ba.MainWindow.row7_m", "modulename": "soliton_automata.gui.main_window_ba", "qualname": "MainWindow.row7_m", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "soliton_automata.gui.main_window_ba.MainWindow.minigrid6_m", "modulename": "soliton_automata.gui.main_window_ba", "qualname": "MainWindow.minigrid6_m", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "soliton_automata.gui.main_window_ba.MainWindow.traversals", "modulename": "soliton_automata.gui.main_window_ba", "qualname": "MainWindow.traversals", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "soliton_automata.gui.main_window_ba.MainWindow.show_matrices_m", "modulename": "soliton_automata.gui.main_window_ba", "qualname": "MainWindow.show_matrices_m", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "soliton_automata.gui.main_window_ba.MainWindow.show_end_result_m", "modulename": "soliton_automata.gui.main_window_ba", "qualname": "MainWindow.show_end_result_m", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "soliton_automata.gui.main_window_ba.MainWindow.show_animation_m", "modulename": "soliton_automata.gui.main_window_ba", "qualname": "MainWindow.show_animation_m", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "soliton_automata.gui.main_window_ba.MainWindow.status_m", "modulename": "soliton_automata.gui.main_window_ba", "qualname": "MainWindow.status_m", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "soliton_automata.gui.main_window_ba.MainWindow.front_wid", "modulename": "soliton_automata.gui.main_window_ba", "qualname": "MainWindow.front_wid", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "soliton_automata.gui.main_window_ba.MainWindow.retranslateUi", "modulename": "soliton_automata.gui.main_window_ba", "qualname": "MainWindow.retranslateUi", "kind": "function", "doc": "<p>Implements multi-language suppport. Is generated automatically when using PyQt5 UI code generator.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "soliton_automata.gui.main_window_ba.MainWindow.change_window", "modulename": "soliton_automata.gui.main_window_ba", "qualname": "MainWindow.change_window", "kind": "function", "doc": "<p>Is called when \"Change Mode\" button is clicked. Changes between the two widgets of the stacked layout.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "soliton_automata.gui.main_window_ba.MainWindow.change_mode", "modulename": "soliton_automata.gui.main_window_ba", "qualname": "MainWindow.change_mode", "kind": "function", "doc": "<p>Realizes the change between being in traversal mode and not being in traversal mode in single soliton widget.\nIn traversal mode, a soliton automaton can be traversed by using an end result as the new soliton graph.\nWhen in traversal mode, the input molecule can't be edited.</p>\n\n<p>Args:\n    checkbox (QtWidgets.QCheckBox): The checkbox that changes the mode.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">checkbox</span><span class=\"p\">:</span> <span class=\"n\">PyQt5</span><span class=\"o\">.</span><span class=\"n\">QtWidgets</span><span class=\"o\">.</span><span class=\"n\">QCheckBox</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "soliton_automata.gui.main_window_ba.MainWindow.change_mode_m", "modulename": "soliton_automata.gui.main_window_ba", "qualname": "MainWindow.change_mode_m", "kind": "function", "doc": "<p>Realizes the change between being in traversal mode and not being in traversal mode in multi soliton widget.\nIn traversal mode, a soliton automaton can be traversed by using an end result as the new soliton graph.\nWhen in traversal mode, the input molecule and the set of bursts can't be edited.</p>\n\n<p>Args:\n    checkbox (QtWidgets.QCheckBox): The checkbox that changes the mode.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">checkbox</span><span class=\"p\">:</span> <span class=\"n\">PyQt5</span><span class=\"o\">.</span><span class=\"n\">QtWidgets</span><span class=\"o\">.</span><span class=\"n\">QCheckBox</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "soliton_automata.gui.main_window_ba.MainWindow.tips", "modulename": "soliton_automata.gui.main_window_ba", "qualname": "MainWindow.tips", "kind": "function", "doc": "<p>Realizes turning on/ off the displaying of tips/ short help in single soliton widget.</p>\n\n<p>Args:\n    checkbox (QtWidgets.QCheckBox): The \"Tips\" Checkbox</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">checkbox</span><span class=\"p\">:</span> <span class=\"n\">PyQt5</span><span class=\"o\">.</span><span class=\"n\">QtWidgets</span><span class=\"o\">.</span><span class=\"n\">QCheckBox</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "soliton_automata.gui.main_window_ba.MainWindow.tips_m", "modulename": "soliton_automata.gui.main_window_ba", "qualname": "MainWindow.tips_m", "kind": "function", "doc": "<p>Realizes turning on/ off the displaying of tips/ short help in multi soliton widget.</p>\n\n<p>Args:\n    checkbox (QtWidgets.QCheckBox): The \"Tips\" Checkbox</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">checkbox</span><span class=\"p\">:</span> <span class=\"n\">PyQt5</span><span class=\"o\">.</span><span class=\"n\">QtWidgets</span><span class=\"o\">.</span><span class=\"n\">QCheckBox</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "soliton_automata.gui.main_window_ba.MainWindow.help_clicked", "modulename": "soliton_automata.gui.main_window_ba", "qualname": "MainWindow.help_clicked", "kind": "function", "doc": "<p>Is called when \"?\" button is clicked in single soliton widget.\nOpens a window with some help regarding the next step(s) the user should do.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "soliton_automata.gui.main_window_ba.MainWindow.help_clicked_m", "modulename": "soliton_automata.gui.main_window_ba", "qualname": "MainWindow.help_clicked_m", "kind": "function", "doc": "<p>Is called when \"?\" button is clicked in multi soliton widget.\nOpens a window with some help regarding the next step(s) the user should do.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "soliton_automata.gui.main_window_ba.MainWindow.submit_molecule_clicked", "modulename": "soliton_automata.gui.main_window_ba", "qualname": "MainWindow.submit_molecule_clicked", "kind": "function", "doc": "<p>Is called when user clicks button to submit the specified molecule in single soliton widget.\nCatches errors if user used the wrong syntax or specified a molecule that does not fulfill the requirements of a soliton graph.\nIf the user's molecule is valid it displays the graph of the molecule. It then also reveals a save button for the graph visualisation,\nan info button and all the necessary widgets for the user to choose exterior nodes.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "soliton_automata.gui.main_window_ba.MainWindow.submit_molecule_clicked_m", "modulename": "soliton_automata.gui.main_window_ba", "qualname": "MainWindow.submit_molecule_clicked_m", "kind": "function", "doc": "<p>Is called when user clicks button to submit the specified molecule in multi soliton widget.\nCatches errors if user used the wrong syntax or specified a molecule that does not fulfill the requirements of a soliton graph.\nIf the user's molecule is valid it displays the graph of the molecule. It then also reveals a save button for the graph visualisation,\nan info button and all the necessary widgets for the user to specify a set of bursts and a stop number.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "soliton_automata.gui.main_window_ba.MainWindow.mol_info_clicked", "modulename": "soliton_automata.gui.main_window_ba", "qualname": "MainWindow.mol_info_clicked", "kind": "function", "doc": "<p>Is called when \"Info\" button in single soliton widget is clicked. Opens a dialog window showing whether\nthe automaton is deterministic, strongly deterministic and reachability-deterministic and displaying the degree of non-determinism and all impervious paths.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "soliton_automata.gui.main_window_ba.MainWindow.mol_info_clicked_m", "modulename": "soliton_automata.gui.main_window_ba", "qualname": "MainWindow.mol_info_clicked_m", "kind": "function", "doc": "<p>Is called when \"Info\" button in multi soliton widget is clicked. Opens a dialog window showing whether\nthe automaton is deterministic, strongly deterministic, reachability-deterministic and displaying the degree of non-determinism.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "soliton_automata.gui.main_window_ba.MainWindow.save_clicked", "modulename": "soliton_automata.gui.main_window_ba", "qualname": "MainWindow.save_clicked", "kind": "function", "doc": "<p>Is called when user clicks button to save the graph visualisation in single soliton widget.\nOpens a file dialog in which user can specify a path where the image should be saved.\nOnly allows <code>.jpg</code>, <code>.png</code> and <code>.jpeg</code> file suffixes.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "soliton_automata.gui.main_window_ba.MainWindow.save_clicked_m", "modulename": "soliton_automata.gui.main_window_ba", "qualname": "MainWindow.save_clicked_m", "kind": "function", "doc": "<p>Is called when user clicks button to save the graph visualisation in multi soliton widget.\nOpens a file dialog in which user can specify a path where the image should be saved.\nOnly allows <code>.jpg</code>, <code>.png</code> and <code>.jpeg</code> file suffixes.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "soliton_automata.gui.main_window_ba.MainWindow.submit_set_of_bursts_clicked", "modulename": "soliton_automata.gui.main_window_ba", "qualname": "MainWindow.submit_set_of_bursts_clicked", "kind": "function", "doc": "<p>Is called when user clicks button to submit a set of bursts.\nCatches errors if user used the wrong syntax.\nIf the user's set of bursts is valid it displays all the necessary widgets for the user to choose a burst.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "soliton_automata.gui.main_window_ba.MainWindow.all_exterior_nodes_statechanged", "modulename": "soliton_automata.gui.main_window_ba", "qualname": "MainWindow.all_exterior_nodes_statechanged", "kind": "function", "doc": "<p>Is called when \"All\" checkbox in single soliton widget is checked/ unchecked.\nHides/ unhides widgets to choose a pair of exterior nodes.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "soliton_automata.gui.main_window_ba.MainWindow.all_bursts_statechanged", "modulename": "soliton_automata.gui.main_window_ba", "qualname": "MainWindow.all_bursts_statechanged", "kind": "function", "doc": "<p>Is called when \"All\" checkbox in multi soliton widget is checked/ unchecked.\nHides/ unhides widgets to choose a burst.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "soliton_automata.gui.main_window_ba.MainWindow.submit_exterior_nodes_clicked", "modulename": "soliton_automata.gui.main_window_ba", "qualname": "MainWindow.submit_exterior_nodes_clicked", "kind": "function", "doc": "<p>Is called when user clicks button to submit exterior nodes.\nDisplays all possible soliton paths between the two chosen nodes/ all pairs of exterior nodes.\nInforms the user if no soliton path exists between them.\nOtherwise all the necessary widgets for the user to choose a computed soliton path and look at further information on it are revealed.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "soliton_automata.gui.main_window_ba.MainWindow.submit_burst_clicked", "modulename": "soliton_automata.gui.main_window_ba", "qualname": "MainWindow.submit_burst_clicked", "kind": "function", "doc": "<p>Is called when user clicks button to submit burst(s).\nDisplays all possible traversals for the chosen burst/ all bursts.\nInforms the user if no traversals exists for it/ them.\nOtherwise all the necessary widgets for the user to choose a computed traversals and look at further information on it are revealed.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "soliton_automata.gui.main_window_ba.MainWindow.show_matrices_clicked", "modulename": "soliton_automata.gui.main_window_ba", "qualname": "MainWindow.show_matrices_clicked", "kind": "function", "doc": "<p>Is called when user clicks button to have the adjacency matrices of every timestep in single soliton widget displayed.\nMakes a small window pop up that shows the labelled adjacency matrices and provides a save button.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "soliton_automata.gui.main_window_ba.MainWindow.show_matrices_clicked_m", "modulename": "soliton_automata.gui.main_window_ba", "qualname": "MainWindow.show_matrices_clicked_m", "kind": "function", "doc": "<p>Is called when user clicks button to have the adjacency matrices of every timestep in multi soliton widget displayed.\nMakes a small window pop up that shows the labelled adjacency matrices and provides a save button.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "soliton_automata.gui.main_window_ba.MainWindow.show_end_result_clicked", "modulename": "soliton_automata.gui.main_window_ba", "qualname": "MainWindow.show_end_result_clicked", "kind": "function", "doc": "<p>Is called when user clicks button to have the resulting graph (after soliton path is traversed) in single soliton widget displayed.\nMakes a small window pop up that shows the graph visualisation and provides a save button.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "soliton_automata.gui.main_window_ba.MainWindow.show_end_result_clicked_m", "modulename": "soliton_automata.gui.main_window_ba", "qualname": "MainWindow.show_end_result_clicked_m", "kind": "function", "doc": "<p>Is called when user clicks button to have the resulting graph (after soliton path is traversed) in multi soliton widget displayed.\nMakes a small window pop up that shows the graph visualisation and provides a save button.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "soliton_automata.gui.main_window_ba.MainWindow.show_animation_clicked", "modulename": "soliton_automata.gui.main_window_ba", "qualname": "MainWindow.show_animation_clicked", "kind": "function", "doc": "<p>Is called when user clicks button to have the animation of the soliton traversing the graph displayed.\nMakes a small window pop up that shows the animation and provides a \"pause\"/ \"play\" button, a \"back\" and a \"forward\" button and a save button.\nInstead of displaying the <code>gif</code> it uses a sequence of <code>PIL</code> images and always shows the next image after a certain time.\nCalls different animation functions depending on whether application is in single or multi soliton widget. </p>\n\n<p>Args:\n    button (QtWidgets.QPushButton): Button that called the function (either button in single or in multi soliton widget).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">button</span><span class=\"p\">:</span> <span class=\"n\">PyQt5</span><span class=\"o\">.</span><span class=\"n\">QtWidgets</span><span class=\"o\">.</span><span class=\"n\">QPushButton</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "soliton_automata.gui.main_window_ba.MainWindow.stop_animation", "modulename": "soliton_automata.gui.main_window_ba", "qualname": "MainWindow.stop_animation", "kind": "function", "doc": "<p>Stops the timer that is used for the animation.\nWithout this method the application would crash if the animation window would get closed.\nArgs:\n    event: Close event of the window that shows animation.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "soliton_automata.gui.main_window_ba.MainWindow.hide_retain_space", "modulename": "soliton_automata.gui.main_window_ba", "qualname": "MainWindow.hide_retain_space", "kind": "function", "doc": "<p>Retains the space of widgets even when they are hidden.</p>\n\n<p>Args:\n    widgets (list): Widgets whose spaces should be retained.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">widgets</span><span class=\"p\">:</span> <span class=\"nb\">list</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "soliton_automata.gui.main_window_ba.MainWindow.hide_multiple", "modulename": "soliton_automata.gui.main_window_ba", "qualname": "MainWindow.hide_multiple", "kind": "function", "doc": "<p>Hides multiple widgets at once, makes code a lot shorter because it unites several calls of the same function.</p>\n\n<p>Args:\n    widgets (list): Widgets who should be hidden.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">widgets</span><span class=\"p\">:</span> <span class=\"nb\">list</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "soliton_automata.gui.main_window_ba.MainWindow.show_multiple", "modulename": "soliton_automata.gui.main_window_ba", "qualname": "MainWindow.show_multiple", "kind": "function", "doc": "<p>Shows multiple widgets at once, makes code a lot shorter because it unites several calls of the same function.</p>\n\n<p>Args:\n    widgets (list): Widgets who should be showed.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">widgets</span><span class=\"p\">:</span> <span class=\"nb\">list</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "soliton_automata.gui.main_window_ba.MainWindow.heightForWidth", "modulename": "soliton_automata.gui.main_window_ba", "qualname": "MainWindow.heightForWidth", "kind": "function", "doc": "<p>Computes height for a given width.</p>\n\n<p>Args:\n    width (float): Given width.</p>\n\n<p>Returns:\n    float: Computed height.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">width</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "soliton_automata.gui.main_window_ba.MainWindow.widthForHeight", "modulename": "soliton_automata.gui.main_window_ba", "qualname": "MainWindow.widthForHeight", "kind": "function", "doc": "<p>Computes width for a given height.</p>\n\n<p>Args:\n    height (float): Given height.</p>\n\n<p>Returns:\n    float: Computed width.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">height</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "soliton_automata.gui.main_window_ba.MainWindow.resizeEvent", "modulename": "soliton_automata.gui.main_window_ba", "qualname": "MainWindow.resizeEvent", "kind": "function", "doc": "<p>Keeps the right aspect ratio of the graph visualisation image (or welcoming screen in the beginning) when window is resized.</p>\n\n<p>Args:\n    event (QtGui.QResizeEvent): Resize event.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span><span class=\"p\">:</span> <span class=\"n\">PyQt5</span><span class=\"o\">.</span><span class=\"n\">QtGui</span><span class=\"o\">.</span><span class=\"n\">QResizeEvent</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "soliton_automata.gui.startscreen", "modulename": "soliton_automata.gui.startscreen", "kind": "module", "doc": "<p>Computation of startscreen.</p>\n"}, {"fullname": "soliton_automata.gui.startscreen.Startscreen", "modulename": "soliton_automata.gui.startscreen", "qualname": "Startscreen", "kind": "class", "doc": "<p>Computes image for the start screen.</p>\n"}, {"fullname": "soliton_automata.gui.startscreen.Startscreen.image", "modulename": "soliton_automata.gui.startscreen", "qualname": "Startscreen.image", "kind": "variable", "doc": "<p>Welcoming image.</p>\n", "annotation": ": &lt;module &#x27;PIL.Image&#x27; from &#x27;/Users/helena/.pyenv/versions/solitons/lib/python3.10/site-packages/PIL/Image.py&#x27;&gt;"}, {"fullname": "soliton_automata.res", "modulename": "soliton_automata.res", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "soliton_automata.res.resources", "modulename": "soliton_automata.res.resources", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "soliton_automata.res.resources.qt_resource_data", "modulename": "soliton_automata.res.resources", "qualname": "qt_resource_data", "kind": "variable", "doc": "<p></p>\n", "default_value": "b&#x27;\\x00\\x00\\x00\\xf9&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot;   viewBox=&quot;0 0 24 24&quot; fill=&quot;none&quot; stroke=&quot;currentColor&quot; stroke-width=&quot;2&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot; class=&quot;feather feather-chevron-down&quot;&gt;&lt;polyline points=&quot;6 15 12 9 18 15&quot;&gt;&lt;/polyline&gt;&lt;/svg&gt;\\x00\\x00\\x01%&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot;   viewBox=&quot;0 0 24 24&quot; fill=&quot;none&quot; stroke=&quot;currentColor&quot; stroke-width=&quot;2&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot; class=&quot;feather feather-arrow-right&quot;&gt;&lt;line x1=&quot;5&quot; y1=&quot;12&quot; x2=&quot;19&quot; y2=&quot;12&quot;&gt;&lt;/line&gt;&lt;polyline points=&quot;12 5 19 12 12 19&quot;&gt;&lt;/polyline&gt;&lt;/svg&gt;\\x00\\x00\\x01 &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot;   viewBox=&quot;0 0 24 24&quot; fill=&quot;none&quot; stroke=&quot;currentColor&quot; stroke-width=&quot;2&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot; class=&quot;feather feather-arrow-right&quot;&gt;&lt;line x1=&quot;9&quot; y1=&quot;5&quot; x2=&quot;9&quot; y2=&quot;19&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;15&quot; y1=&quot;5&quot; x2=&quot;15&quot; y2=&quot;19&quot;&gt;&lt;/line&gt;&lt;/svg&gt;\\x00\\x00\\x02W&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt; &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; viewBox=&quot;0 0 64 64&quot;&gt;&lt;title&gt;2&lt;/title&gt;&lt;g id=&quot;Layer_41&quot; data-name=&quot;Layer 41&quot;&gt;&lt;path d=&quot;M57.47,38.6a2,2,0,0,0-2,2v6.83A6.08,6.08,0,0,1,49.4,53.5H14.6a6.08,6.08,0,0,1-6.07-6.07V40.6a2,2,0,0,0-4,0v6.83A10.08,10.08,0,0,0,14.6,57.5H49.4A10.08,10.08,0,0,0,59.47,47.43V40.6A2,2,0,0,0,57.47,38.6Z&quot;/&gt;&lt;path d=&quot;M30.58,44.44a2,2,0,0,0,.31.25l.15.08.2.1.2.06.17.05a2,2,0,0,0,.78,0l.17-.05.2-.06.2-.1.15-.08a2,2,0,0,0,.31-.25L44.8,33.06A2,2,0,0,0,42,30.23l-8,8V8.5a2,2,0,0,0-4,0V38.2l-8-8a2,2,0,0,0-2.83,2.83Z&quot;/&gt;&lt;/g&gt;&lt;/svg&gt;\\x00\\x00\\x00\\xf8&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot;   viewBox=&quot;0 0 24 24&quot; fill=&quot;none&quot; stroke=&quot;currentColor&quot; stroke-width=&quot;2&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot; class=&quot;feather feather-chevron-down&quot;&gt;&lt;polyline points=&quot;6 9 12 15 18 9&quot;&gt;&lt;/polyline&gt;&lt;/svg&gt;\\x00\\x00\\x00\\xfb&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot;   viewBox=&quot;0 0 24 24&quot; fill=&quot;none&quot; stroke=&quot;currentColor&quot; stroke-width=&quot;2&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot; class=&quot;feather feather-arrow-right&quot;&gt;&lt;polyline points=&quot;8 5 18 12 8 19 8 5&quot;&gt;&lt;/polyline&gt;&lt;/svg&gt;\\x00\\x00\\x01#&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot;   viewBox=&quot;0 0 24 24&quot; fill=&quot;none&quot; stroke=&quot;currentColor&quot; stroke-width=&quot;2&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot; class=&quot;feather feather-arrow-left&quot;&gt;&lt;line x1=&quot;19&quot; y1=&quot;12&quot; x2=&quot;5&quot; y2=&quot;12&quot;&gt;&lt;/line&gt;&lt;polyline points=&quot;12 19 5 12 12 5&quot;&gt;&lt;/polyline&gt;&lt;/svg&gt;&#x27;"}, {"fullname": "soliton_automata.res.resources.qt_resource_name", "modulename": "soliton_automata.res.resources", "qualname": "qt_resource_name", "kind": "variable", "doc": "<p></p>\n", "default_value": "b&quot;\\x00\\x05\\x00o\\xa6S\\x00i\\x00c\\x00o\\x00n\\x00s\\x00\\x0c\\x06\\xf0+\\xe7\\x00u\\x00p\\x00-\\x00a\\x00r\\x00r\\x00o\\x00w\\x00.\\x00s\\x00v\\x00g\\x00\\x0f\\x02\\x89\\xc8\\x07\\x00r\\x00i\\x00g\\x00h\\x00t\\x00-\\x00a\\x00r\\x00r\\x00o\\x00w\\x00.\\x00s\\x00v\\x00g\\x00\\t\\x0c\\x98\\xb7\\xc7\\x00p\\x00a\\x00u\\x00s\\x00e\\x00.\\x00s\\x00v\\x00g\\x00\\x08\\x08\\xc8U\\xe7\\x00s\\x00a\\x00v\\x00e\\x00.\\x00s\\x00v\\x00g\\x00\\x13\\rt\\xe6g\\x00d\\x00r\\x00o\\x00p\\x00-\\x00d\\x00o\\x00w\\x00n\\x00-\\x00a\\x00r\\x00r\\x00o\\x00w\\x00.\\x00s\\x00v\\x00g\\x00\\x08\\x02\\x8cT&#x27;\\x00p\\x00l\\x00a\\x00y\\x00.\\x00s\\x00v\\x00g\\x00\\x0e\\x0e\\xc87G\\x00l\\x00e\\x00f\\x00t\\x00-\\x00a\\x00r\\x00r\\x00o\\x00w\\x00.\\x00s\\x00v\\x00g&quot;"}, {"fullname": "soliton_automata.res.resources.qt_resource_struct_v1", "modulename": "soliton_automata.res.resources", "qualname": "qt_resource_struct_v1", "kind": "variable", "doc": "<p></p>\n", "default_value": "b&#x27;\\x00\\x00\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x07\\x00\\x00\\x00\\x02\\x00\\x00\\x00.\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\xfd\\x00\\x00\\x00\\xac\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x06\\xa1\\x00\\x00\\x00\\x10\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00j\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x03J\\x00\\x00\\x00R\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x02&amp;\\x00\\x00\\x00\\x80\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x05\\xa5\\x00\\x00\\x00\\xc2\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x07\\xa0&#x27;"}, {"fullname": "soliton_automata.res.resources.qt_resource_struct_v2", "modulename": "soliton_automata.res.resources", "qualname": "qt_resource_struct_v2", "kind": "variable", "doc": "<p></p>\n", "default_value": "b&#x27;\\x00\\x00\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x07\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00.\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\xfd\\x00\\x00\\x01\\x84\\x85&lt;\\x03\\xac\\x00\\x00\\x00\\xac\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x06\\xa1\\x00\\x00\\x01\\x84\\x85\\xc6\\xe5\\r\\x00\\x00\\x00\\x10\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x85\\xf8\\xbe/\\xb8\\x00\\x00\\x00j\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x03J\\x00\\x00\\x01\\x84\\x85?\\x06\\xa9\\x00\\x00\\x00R\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x02&amp;\\x00\\x00\\x01\\x84\\x85\\xc8\\xbc\\xcd\\x00\\x00\\x00\\x80\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x05\\xa5\\x00\\x00\\x01\\x84\\x857\\xc07\\x00\\x00\\x00\\xc2\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x07\\xa0\\x00\\x00\\x01\\x84\\x85&lt;\\x16r&#x27;"}, {"fullname": "soliton_automata.res.resources.qt_version", "modulename": "soliton_automata.res.resources", "qualname": "qt_version", "kind": "variable", "doc": "<p></p>\n", "default_value": "[5, 15, 11]"}, {"fullname": "soliton_automata.res.resources.qInitResources", "modulename": "soliton_automata.res.resources", "qualname": "qInitResources", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "soliton_automata.res.resources.qCleanupResources", "modulename": "soliton_automata.res.resources", "qualname": "qCleanupResources", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "soliton_automata.run", "modulename": "soliton_automata.run", "kind": "module", "doc": "<p>Starts the application.</p>\n"}, {"fullname": "soliton_automata.run.main", "modulename": "soliton_automata.run", "qualname": "main", "kind": "function", "doc": "<p>Initializes object of class <code>MainWindow</code>, sets style sheet of the window and then executes the application.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "soliton_automata.soliton_classes", "modulename": "soliton_automata.soliton_classes", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "soliton_automata.soliton_classes.multiwave_soliton_automata", "modulename": "soliton_automata.soliton_classes.multiwave_soliton_automata", "kind": "module", "doc": "<p>Multiwave soliton automaton.</p>\n"}, {"fullname": "soliton_automata.soliton_classes.multiwave_soliton_automata.MultiwaveSolitonAutomaton", "modulename": "soliton_automata.soliton_classes.multiwave_soliton_automata", "qualname": "MultiwaveSolitonAutomaton", "kind": "class", "doc": "<p>Representation of a multiwave soliton automaton, which contains all traversals for a burst.</p>\n"}, {"fullname": "soliton_automata.soliton_classes.multiwave_soliton_automata.MultiwaveSolitonAutomaton.__init__", "modulename": "soliton_automata.soliton_classes.multiwave_soliton_automata", "qualname": "MultiwaveSolitonAutomaton.__init__", "kind": "function", "doc": "<p>Initializes a <code>MultiwaveSolitonAutomaton</code> object by using a soliton graph and a burst.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">soliton_graph</span><span class=\"p\">:</span> <span class=\"n\">soliton_automata</span><span class=\"o\">.</span><span class=\"n\">soliton_classes</span><span class=\"o\">.</span><span class=\"n\">soliton_graph</span><span class=\"o\">.</span><span class=\"n\">SolitonGraph</span>,</span><span class=\"param\">\t<span class=\"n\">bursts</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span>)</span>"}, {"fullname": "soliton_automata.soliton_classes.multiwave_soliton_automata.MultiwaveSolitonAutomaton.soliton_graph", "modulename": "soliton_automata.soliton_classes.multiwave_soliton_automata", "qualname": "MultiwaveSolitonAutomaton.soliton_graph", "kind": "variable", "doc": "<p>Soliton graph the automaton is based on.</p>\n", "annotation": ": soliton_automata.soliton_classes.soliton_graph.SolitonGraph"}, {"fullname": "soliton_automata.soliton_classes.multiwave_soliton_automata.MultiwaveSolitonAutomaton.bursts", "modulename": "soliton_automata.soliton_classes.multiwave_soliton_automata", "qualname": "MultiwaveSolitonAutomaton.bursts", "kind": "variable", "doc": "<p>The set of input burst.</p>\n"}, {"fullname": "soliton_automata.soliton_classes.multiwave_soliton_automata.MultiwaveSolitonAutomaton.bursts_dicts", "modulename": "soliton_automata.soliton_classes.multiwave_soliton_automata", "qualname": "MultiwaveSolitonAutomaton.bursts_dicts", "kind": "variable", "doc": "<p>List of the bursts as dictionaries (soliton number as key and a list containing exterior nodes and entry time as value).</p>\n", "annotation": ": list"}, {"fullname": "soliton_automata.soliton_classes.multiwave_soliton_automata.MultiwaveSolitonAutomaton.deterministic", "modulename": "soliton_automata.soliton_classes.multiwave_soliton_automata", "qualname": "MultiwaveSolitonAutomaton.deterministic", "kind": "variable", "doc": "<p>Whether the multiwave soliton automaton is deterministic.</p>\n", "annotation": ": bool"}, {"fullname": "soliton_automata.soliton_classes.multiwave_soliton_automata.MultiwaveSolitonAutomaton.strongly_deterministic", "modulename": "soliton_automata.soliton_classes.multiwave_soliton_automata", "qualname": "MultiwaveSolitonAutomaton.strongly_deterministic", "kind": "variable", "doc": "<p>Whether the multiwave soliton graph is strongly deterministic.</p>\n", "annotation": ": bool"}, {"fullname": "soliton_automata.soliton_classes.multiwave_soliton_automata.MultiwaveSolitonAutomaton.reachability_deterministic", "modulename": "soliton_automata.soliton_classes.multiwave_soliton_automata", "qualname": "MultiwaveSolitonAutomaton.reachability_deterministic", "kind": "variable", "doc": "<p>Whether the multiwave soliton graph is reachability-deterministic.</p>\n", "annotation": ": bool"}, {"fullname": "soliton_automata.soliton_classes.multiwave_soliton_automata.MultiwaveSolitonAutomaton.degree_of_nondeterminism", "modulename": "soliton_automata.soliton_classes.multiwave_soliton_automata", "qualname": "MultiwaveSolitonAutomaton.degree_of_nondeterminism", "kind": "variable", "doc": "<p>The degree of non-determinism of the soliton automaton</p>\n", "annotation": ": int"}, {"fullname": "soliton_automata.soliton_classes.multiwave_soliton_automata.MultiwaveSolitonAutomaton.states_plus_traversals", "modulename": "soliton_automata.soliton_classes.multiwave_soliton_automata", "qualname": "MultiwaveSolitonAutomaton.states_plus_traversals", "kind": "variable", "doc": "<p>All states of the soliton automaton plus all traversals that can be found in each state plus number of traversals found for each burst\n(Id/ string of the states adjacency matrix as key and state, traversals and list of numbers as values).</p>\n", "annotation": ": dict"}, {"fullname": "soliton_automata.soliton_classes.multiwave_soliton_automata.MultiwaveSolitonAutomaton.build_bursts_dicts", "modulename": "soliton_automata.soliton_classes.multiwave_soliton_automata", "qualname": "MultiwaveSolitonAutomaton.build_bursts_dicts", "kind": "function", "doc": "<p>Builds a list of burst dictionaries.</p>\n\n<p>Returns:\n    list: The computed list of burst dictionaries.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "soliton_automata.soliton_classes.multiwave_soliton_automata.MultiwaveSolitonAutomaton.burst_dict", "modulename": "soliton_automata.soliton_classes.multiwave_soliton_automata", "qualname": "MultiwaveSolitonAutomaton.burst_dict", "kind": "function", "doc": "<p>Builds a dictionary as an internal representation of a burst.</p>\n\n<p>Args:\n    burst (str): The burst string that should be turned into a dictionary.</p>\n\n<p>Returns:\n    dict: The computed dictionary with soliton number as key and a list containing exterior nodes and entry time as value.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">burst</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "soliton_automata.soliton_classes.multiwave_soliton_automata.MultiwaveSolitonAutomaton.build_traversals", "modulename": "soliton_automata.soliton_classes.multiwave_soliton_automata", "qualname": "MultiwaveSolitonAutomaton.build_traversals", "kind": "function", "doc": "<p>Turns traversals into objects of class <code>Traversal</code>.</p>\n\n<p>Args:\n    travs (list): Traversals that are represented as soliton positions and bindings for each timestep.\n    soliton_graph (SolitonGraph): Soliton graph the traversal was found in.</p>\n\n<p>Returns:\n    list: Traversals.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">travs</span><span class=\"p\">:</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">soliton_graph</span><span class=\"p\">:</span> <span class=\"n\">soliton_automata</span><span class=\"o\">.</span><span class=\"n\">soliton_classes</span><span class=\"o\">.</span><span class=\"n\">soliton_graph</span><span class=\"o\">.</span><span class=\"n\">SolitonGraph</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "soliton_automata.soliton_classes.multiwave_soliton_automata.MultiwaveSolitonAutomaton.change_bindings", "modulename": "soliton_automata.soliton_classes.multiwave_soliton_automata", "qualname": "MultiwaveSolitonAutomaton.change_bindings", "kind": "function", "doc": "<p>Changes binding type of an edge (1 -> 2 and 2 -> 1).</p>\n\n<p>Args:\n    bindings (dict): Current binding types of all edges in the graph.\n    edge (tuple): Edge whose binding type should be changed.</p>\n\n<p>Returns:\n    dict: Updated binding dictionary.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">bindings</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>, </span><span class=\"param\"><span class=\"n\">edge</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "soliton_automata.soliton_classes.multiwave_soliton_automata.MultiwaveSolitonAutomaton.find_all_travs_given_burst", "modulename": "soliton_automata.soliton_classes.multiwave_soliton_automata", "qualname": "MultiwaveSolitonAutomaton.find_all_travs_given_burst", "kind": "function", "doc": "<p>Finds all possible traversals for a given burst by using a recursive backtracking algorithm.</p>\n\n<p>Args:\n    graph (nx.Graph): Graph the traversals should be found in.\n    burst_dict (dict): The burst that is used. \n    t (int): Current timestep.\n    s_pos_all_timesteps (list): Soliton positions for all past timesteps.\n    bindings_all_timesteps (list): Binding types of all edges in the graph for all past timesteps.\n    binds_all_timesteps (list): Binding type of the last edge that was traversed by each soliton for all past timesteps.\n    poss_suc_combs_all_timesteps (list): Possible combinations of successor nodes for all past timesteps.\n    travs (list): All currently found traversals.</p>\n\n<p>Returns:\n    list: All found traversals (is empty if no traversal exists).</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">graph</span><span class=\"p\">:</span> <span class=\"n\">networkx</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"n\">Graph</span>,</span><span class=\"param\">\t<span class=\"n\">burst_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">t</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">s_pos_all_timesteps</span><span class=\"p\">:</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">bindings_all_timesteps</span><span class=\"p\">:</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">binds_all_timesteps</span><span class=\"p\">:</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">poss_suc_combs_all_timesteps</span><span class=\"p\">:</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">travs</span><span class=\"p\">:</span> <span class=\"nb\">list</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "soliton_automata.soliton_classes.multiwave_soliton_automata.MultiwaveSolitonAutomaton.call_find_all_travs_given_burst", "modulename": "soliton_automata.soliton_classes.multiwave_soliton_automata", "qualname": "MultiwaveSolitonAutomaton.call_find_all_travs_given_burst", "kind": "function", "doc": "<p>Initializes some parameters and then calls <code>find_all_travs_given_burst</code> with them.</p>\n\n<p>Args:\n    burst_dict (dict): The burst that is used. \n    soliton_graph (SolitonGraph): Soliton graph the traversals should be found in.</p>\n\n<p>Returns:\n    list: All found travs as traversals (returns empty list when no traversal is found).</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">burst_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">soliton_graph</span><span class=\"p\">:</span> <span class=\"n\">soliton_automata</span><span class=\"o\">.</span><span class=\"n\">soliton_classes</span><span class=\"o\">.</span><span class=\"n\">soliton_graph</span><span class=\"o\">.</span><span class=\"n\">SolitonGraph</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "soliton_automata.soliton_classes.multiwave_soliton_automata.MultiwaveSolitonAutomaton.all_traversals", "modulename": "soliton_automata.soliton_classes.multiwave_soliton_automata", "qualname": "MultiwaveSolitonAutomaton.all_traversals", "kind": "function", "doc": "<p>Calls <code>call_find_all_travs_given_burst</code> for all states of the automaton and all bursts in order to get all possible traversals in all states.</p>\n\n<p>Returns:\n    bool: Whether the soliton automaton is deterministic or not.\n    bool: Whether the soliton automaton is strongly deterministic or not.\n    bool: Whether the soliton automaton is reachability-deterministic or not.\n    int: The degree of non-determinism of the soliton automaton.\n    dict: All states of the soliton graph plus all traversals that can be found in each state plus number of traversals found for each burst.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "soliton_automata.soliton_classes.multiwave_soliton_automata.MultiwaveSolitonAutomaton.identify_imperf_travs", "modulename": "soliton_automata.soliton_classes.multiwave_soliton_automata", "qualname": "MultiwaveSolitonAutomaton.identify_imperf_travs", "kind": "function", "doc": "<p>Uses the list of perfect traversals and a list of possible imperfect traversals for a state and a burst to identify which traversals are actually imperfect traversals. </p>\n\n<p>Args:\n    real_travs (list): All real/ perfect traversals that were found.\n    maybe_imperf (list): All traversals that might be imperfect configuration trails.\n    state_sucstate_burst (dict): Dictionary that contains a triple of state, successor state and a burst as key and the number of found traversals between the two states with the burst as value.</p>\n\n<p>Returns:\n    bool: Whether an imperfect path was found.\n    dict: Modified <code>state_sucstate_burst</code>; if imperfect path was found then number of found traversals for state, successor state and burst was raised.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">real_travs</span><span class=\"p\">:</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">maybe_imperf</span><span class=\"p\">:</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">state_sucstate_burst</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "soliton_automata.soliton_classes.multiwave_soliton_automata.MultiwaveSolitonAutomaton.matrix_to_string", "modulename": "soliton_automata.soliton_classes.multiwave_soliton_automata", "qualname": "MultiwaveSolitonAutomaton.matrix_to_string", "kind": "function", "doc": "<p>Computes an ID for a matrix.</p>\n\n<p>Args:\n    matrix (np.ndarray): Matrix whos ID should be computed.</p>\n\n<p>Returns:\n    str: The computed ID which is a concatination of the matrix's elements in row-wise order.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">matrix</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "soliton_automata.soliton_classes.soliton_automata", "modulename": "soliton_automata.soliton_classes.soliton_automata", "kind": "module", "doc": "<p>Soliton automaton.</p>\n"}, {"fullname": "soliton_automata.soliton_classes.soliton_automata.SolitonAutomaton", "modulename": "soliton_automata.soliton_classes.soliton_automata", "qualname": "SolitonAutomaton", "kind": "class", "doc": "<p>Representation of a soliton automaton, which contains all soliton paths between all pairs of exterior nodes.</p>\n"}, {"fullname": "soliton_automata.soliton_classes.soliton_automata.SolitonAutomaton.__init__", "modulename": "soliton_automata.soliton_classes.soliton_automata", "qualname": "SolitonAutomaton.__init__", "kind": "function", "doc": "<p>Initializes a <code>SolitonAutomaton</code> object by using a soliton graph and a stop number.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">soliton_graph</span><span class=\"p\">:</span> <span class=\"n\">soliton_automata</span><span class=\"o\">.</span><span class=\"n\">soliton_classes</span><span class=\"o\">.</span><span class=\"n\">soliton_graph</span><span class=\"o\">.</span><span class=\"n\">SolitonGraph</span></span>)</span>"}, {"fullname": "soliton_automata.soliton_classes.soliton_automata.SolitonAutomaton.soliton_graph", "modulename": "soliton_automata.soliton_classes.soliton_automata", "qualname": "SolitonAutomaton.soliton_graph", "kind": "variable", "doc": "<p>Soliton graph the automaton is based on.</p>\n", "annotation": ": soliton_automata.soliton_classes.soliton_graph.SolitonGraph"}, {"fullname": "soliton_automata.soliton_classes.soliton_automata.SolitonAutomaton.deterministic", "modulename": "soliton_automata.soliton_classes.soliton_automata", "qualname": "SolitonAutomaton.deterministic", "kind": "variable", "doc": "<p>Whether the soliton automaton is deterministic.</p>\n", "annotation": ": bool"}, {"fullname": "soliton_automata.soliton_classes.soliton_automata.SolitonAutomaton.strongly_deterministic", "modulename": "soliton_automata.soliton_classes.soliton_automata", "qualname": "SolitonAutomaton.strongly_deterministic", "kind": "variable", "doc": "<p>Whether the soliton automaton is strongly deterministic.</p>\n", "annotation": ": bool"}, {"fullname": "soliton_automata.soliton_classes.soliton_automata.SolitonAutomaton.reachability_deterministic", "modulename": "soliton_automata.soliton_classes.soliton_automata", "qualname": "SolitonAutomaton.reachability_deterministic", "kind": "variable", "doc": "<p>Whether the soliton automaton is reachability-deterministic.</p>\n", "annotation": ": bool"}, {"fullname": "soliton_automata.soliton_classes.soliton_automata.SolitonAutomaton.degree_of_nondeterminism", "modulename": "soliton_automata.soliton_classes.soliton_automata", "qualname": "SolitonAutomaton.degree_of_nondeterminism", "kind": "variable", "doc": "<p>The degree of non-determinism of the soliton automaton</p>\n", "annotation": ": int"}, {"fullname": "soliton_automata.soliton_classes.soliton_automata.SolitonAutomaton.states_plus_soliton_paths", "modulename": "soliton_automata.soliton_classes.soliton_automata", "qualname": "SolitonAutomaton.states_plus_soliton_paths", "kind": "variable", "doc": "<p>All states of the soliton automaton plus all soliton paths that can be found in each state\n(Id/ string of the states adjacency matrix as key and state and soliton paths as values).</p>\n", "annotation": ": dict"}, {"fullname": "soliton_automata.soliton_classes.soliton_automata.SolitonAutomaton.build_soliton_paths", "modulename": "soliton_automata.soliton_classes.soliton_automata", "qualname": "SolitonAutomaton.build_soliton_paths", "kind": "function", "doc": "<p>Turns paths into objects of class <code>SolitonPath</code>.</p>\n\n<p>Args:\n    paths (list): Paths that are represented as lists of node ids.\n    soliton_graph (SolitonGraph): Soliton graph the paths were found in.</p>\n\n<p>Returns:\n    list: Soliton paths.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">paths</span><span class=\"p\">:</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">soliton_graph</span><span class=\"p\">:</span> <span class=\"n\">soliton_automata</span><span class=\"o\">.</span><span class=\"n\">soliton_classes</span><span class=\"o\">.</span><span class=\"n\">soliton_graph</span><span class=\"o\">.</span><span class=\"n\">SolitonGraph</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "soliton_automata.soliton_classes.soliton_automata.SolitonAutomaton.change_bindings", "modulename": "soliton_automata.soliton_classes.soliton_automata", "qualname": "SolitonAutomaton.change_bindings", "kind": "function", "doc": "<p>Changes binding type of an edge (1 -> 2 and 2 -> 1).</p>\n\n<p>Args:\n    bindings (dict): Current binding types of all edges in the graph.\n    edge (tuple): Edge whose binding type should be changed.</p>\n\n<p>Returns:\n    dict: Updated binding dictionary.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">bindings</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>, </span><span class=\"param\"><span class=\"n\">edge</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "soliton_automata.soliton_classes.soliton_automata.SolitonAutomaton.build_copies", "modulename": "soliton_automata.soliton_classes.soliton_automata", "qualname": "SolitonAutomaton.build_copies", "kind": "function", "doc": "<p>Copies all variables that are changed during <code>find_all_paths</code>.</p>\n\n<p>Args:\n    akt (int): Node that was currently added to path.\n    path (list): Current found path.\n    bindings (dict): Current binding types of all edges in the graph.\n    bind (int): Binding type of the last edge that was traversed.</p>\n\n<p>Returns:\n    int: Copy of <code>akt</code>.\n    list: Copy of <code>path</code>.\n    dict: Copy of <code>bindings</code>.\n    int: Copy of <code>bind</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">akt</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">list</span>, </span><span class=\"param\"><span class=\"n\">bindings</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>, </span><span class=\"param\"><span class=\"n\">bind</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "soliton_automata.soliton_classes.soliton_automata.SolitonAutomaton.find_all_paths_given_nodes", "modulename": "soliton_automata.soliton_classes.soliton_automata", "qualname": "SolitonAutomaton.find_all_paths_given_nodes", "kind": "function", "doc": "<p>Finds all possible soliton paths between two given exterior nodes by using a recursive backtracking algorithm.\n    A path can only be a soliton path if the edges traversed by the soliton have alternating binding types (1,2,1,2,...).</p>\n\n<p>Args:\n    graph (nx.Graph): Graph the paths should be found in.\n    bindings (dict): Current binding types of all edges in the graph.\n    end (int): End node of path.\n    path (list): Current found path.\n    akt (int): Node that was currently added to path.\n    bind (int): Binding type of the last edge that was traversed.\n    paths (list): All currently found paths.\n    bindings_all_timesteps (list): Binding types of all edges in the graph for all past timesteps.\n    poss_sucs_all_timesteps (list): Possible successor nodes for all past timesteps.</p>\n\n<p>Returns:\n    list: All found paths (is empty if no path exists).</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">graph</span><span class=\"p\">:</span> <span class=\"n\">networkx</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"n\">Graph</span>,</span><span class=\"param\">\t<span class=\"n\">bindings</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">end</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">akt</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">bind</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">paths</span><span class=\"p\">:</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">bindings_all_timesteps</span><span class=\"p\">:</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">poss_sucs_all_timesteps</span><span class=\"p\">:</span> <span class=\"nb\">list</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "soliton_automata.soliton_classes.soliton_automata.SolitonAutomaton.call_find_all_paths_given_nodes", "modulename": "soliton_automata.soliton_classes.soliton_automata", "qualname": "SolitonAutomaton.call_find_all_paths_given_nodes", "kind": "function", "doc": "<p>Initializes some parameters and then calls <code>find_all_paths_given_nodes</code> with them.</p>\n\n<p>Args:\n    start (int): Start node of path.\n    end (int): End node of path.\n    soliton_graph (SolitonGraph): Soliton graph the paths should be found in.</p>\n\n<p>Returns:\n    list: All found paths as soliton paths (returns empty list when no path is found).</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">start</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">end</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">soliton_graph</span><span class=\"p\">:</span> <span class=\"n\">soliton_automata</span><span class=\"o\">.</span><span class=\"n\">soliton_classes</span><span class=\"o\">.</span><span class=\"n\">soliton_graph</span><span class=\"o\">.</span><span class=\"n\">SolitonGraph</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "soliton_automata.soliton_classes.soliton_automata.SolitonAutomaton.all_paths_and_determinism", "modulename": "soliton_automata.soliton_classes.soliton_automata", "qualname": "SolitonAutomaton.all_paths_and_determinism", "kind": "function", "doc": "<p>Calls <code>call_find_all_paths_given_nodes</code> for all states of the automaton and all pairs of exterior nodes in order to get all possible soliton paths in all states.\nChecks for determinism with the help of the found states and soliton paths.</p>\n\n<p>Returns:\n    bool: Whether the soliton automaton is deterministic or not.\n    bool: Whether the soliton automaton is strongly deterministic or not.\n    bool: Whether the soliton automaton is reachability-deterministic or not.\n    int: The degree of non-determinism of the soliton automaton.\n    dict: All states of the soliton graph plus all soliton paths that can be found in each state.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "soliton_automata.soliton_classes.soliton_automata.SolitonAutomaton.identify_imperf_paths", "modulename": "soliton_automata.soliton_classes.soliton_automata", "qualname": "SolitonAutomaton.identify_imperf_paths", "kind": "function", "doc": "<p>Uses the list of perfect paths and a list of possible imperfect paths for a state and a pair of nodes to identify which paths are actually imperfect paths. </p>\n\n<p>Args:\n    real_paths (list): All real/ perfect paths that were found.\n    maybe_imperf (list): All paths that might be imperfect paths.\n    state_sucstate_pair (dict): Dictionary that contains a triple of state, successor state and a pair of nodes as key and the number of found paths between the two states with the pair of nodes as value.</p>\n\n<p>Returns:\n    bool: Whether an imperfect path was found.\n    dict: Modified <code>state_sucstate_pair</code>; if imperfect path was found then number of found paths for state, successor state and pair of nodes was raised.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">real_paths</span><span class=\"p\">:</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">maybe_imperf</span><span class=\"p\">:</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">state_sucstate_pair</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "soliton_automata.soliton_classes.soliton_automata.SolitonAutomaton.matrix_to_string", "modulename": "soliton_automata.soliton_classes.soliton_automata", "qualname": "SolitonAutomaton.matrix_to_string", "kind": "function", "doc": "<p>Computes an ID for a matrix.</p>\n\n<p>Args:\n    matrix (np.ndarray): Matrix whos ID should be computed.</p>\n\n<p>Returns:\n    str: The computed ID which is a concatination of the matrix's elements in row-wise order.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">matrix</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "soliton_automata.soliton_classes.soliton_automata.SolitonAutomaton.find_impervious_paths", "modulename": "soliton_automata.soliton_classes.soliton_automata", "qualname": "SolitonAutomaton.find_impervious_paths", "kind": "function", "doc": "<p>Finds all impervious paths of the initial soliton graph.</p>\n\n<p>Returns:\n    list: The found impervious paths as readable user outputs.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "soliton_automata.soliton_classes.soliton_graph", "modulename": "soliton_automata.soliton_classes.soliton_graph", "kind": "module", "doc": "<p>Soliton graph.</p>\n"}, {"fullname": "soliton_automata.soliton_classes.soliton_graph.SolitonGraph", "modulename": "soliton_automata.soliton_classes.soliton_graph", "qualname": "SolitonGraph", "kind": "class", "doc": "<p>Representation of a soliton graph.</p>\n"}, {"fullname": "soliton_automata.soliton_classes.soliton_graph.SolitonGraph.__init__", "modulename": "soliton_automata.soliton_classes.soliton_graph", "qualname": "SolitonGraph.__init__", "kind": "function", "doc": "<p>Initializes a <code>SolitonGraph</code> object by using the input string of the user.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">user_input</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span>)</span>"}, {"fullname": "soliton_automata.soliton_classes.soliton_graph.SolitonGraph.exterior_nodes", "modulename": "soliton_automata.soliton_classes.soliton_graph", "qualname": "SolitonGraph.exterior_nodes", "kind": "variable", "doc": "<p>Exterior nodes (node id as key, node label as value).</p>\n", "annotation": ": dict"}, {"fullname": "soliton_automata.soliton_classes.soliton_graph.SolitonGraph.exterior_nodes_reverse", "modulename": "soliton_automata.soliton_classes.soliton_graph", "qualname": "SolitonGraph.exterior_nodes_reverse", "kind": "variable", "doc": "<p>Exterior nodes (node label as key, node id as value).</p>\n", "annotation": ": dict"}, {"fullname": "soliton_automata.soliton_classes.soliton_graph.SolitonGraph.pysmiles_smiles", "modulename": "soliton_automata.soliton_classes.soliton_graph", "qualname": "SolitonGraph.pysmiles_smiles", "kind": "variable", "doc": "<p><code>SMILES</code> string for use with <code>pysmiles</code>.</p>\n", "annotation": ": str"}, {"fullname": "soliton_automata.soliton_classes.soliton_graph.SolitonGraph.rdkit_smiles", "modulename": "soliton_automata.soliton_classes.soliton_graph", "qualname": "SolitonGraph.rdkit_smiles", "kind": "variable", "doc": "<p><code>SMILES</code> string for use with <code>rdkit</code>.</p>\n", "annotation": ": str"}, {"fullname": "soliton_automata.soliton_classes.soliton_graph.SolitonGraph.bindings", "modulename": "soliton_automata.soliton_classes.soliton_graph", "qualname": "SolitonGraph.bindings", "kind": "variable", "doc": "<p>Binding types (edge as key, binding type as value).</p>\n", "annotation": ": dict"}, {"fullname": "soliton_automata.soliton_classes.soliton_graph.SolitonGraph.graph", "modulename": "soliton_automata.soliton_classes.soliton_graph", "qualname": "SolitonGraph.graph", "kind": "variable", "doc": "<p>Graph that represents the molecule.</p>\n", "annotation": ": networkx.classes.graph.Graph"}, {"fullname": "soliton_automata.soliton_classes.soliton_graph.SolitonGraph.double_edge_positions", "modulename": "soliton_automata.soliton_classes.soliton_graph", "qualname": "SolitonGraph.double_edge_positions", "kind": "variable", "doc": "<p>Positions for a second line (that can be plotted) for each edge.</p>\n", "annotation": ": dict"}, {"fullname": "soliton_automata.soliton_classes.soliton_graph.SolitonGraph.labels", "modulename": "soliton_automata.soliton_classes.soliton_graph", "qualname": "SolitonGraph.labels", "kind": "variable", "doc": "<p>Node labels (node id as key, node label as value).</p>\n", "annotation": ": dict"}, {"fullname": "soliton_automata.soliton_classes.soliton_graph.SolitonGraph.way", "modulename": "soliton_automata.soliton_classes.soliton_graph", "qualname": "SolitonGraph.way", "kind": "variable", "doc": "<p>Way that led to the soliton graph (consists of user input of initial soliton graph of a soliton automaton and soliton paths).</p>\n", "annotation": ": str"}, {"fullname": "soliton_automata.soliton_classes.soliton_graph.SolitonGraph.rings", "modulename": "soliton_automata.soliton_classes.soliton_graph", "qualname": "SolitonGraph.rings", "kind": "variable", "doc": "<p>All rings with entrance node as first and last node.</p>\n", "annotation": ": list"}, {"fullname": "soliton_automata.soliton_classes.soliton_graph.SolitonGraph.set_bindings", "modulename": "soliton_automata.soliton_classes.soliton_graph", "qualname": "SolitonGraph.set_bindings", "kind": "function", "doc": "<p>Sets the soliton graph's bindings to a new binding dictionary.</p>\n\n<p>Args:\n    bindings (dict): New binding dictionary.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">bindings</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "soliton_automata.soliton_classes.soliton_graph.SolitonGraph.find_exterior_nodes", "modulename": "soliton_automata.soliton_classes.soliton_graph", "qualname": "SolitonGraph.find_exterior_nodes", "kind": "function", "doc": "<p>Transforms the users input into dictionary with exterior nodes.</p>\n\n<p>Args:\n    user_input (str): User input.</p>\n\n<p>Returns:\n    dict: Exterior nodes with node ids as keys and node labels as values.\n    dict: Exterior nodes with node labels as keys and node ids as values.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">user_input</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "soliton_automata.soliton_classes.soliton_graph.SolitonGraph.exterior_nodes_name_collision", "modulename": "soliton_automata.soliton_classes.soliton_graph", "qualname": "SolitonGraph.exterior_nodes_name_collision", "kind": "function", "doc": "<p>Checks for name collisions between exterior nodes.</p>\n\n<p>Returns:\n    bool: <code>True</code>, if user used same exterior node label more than once, <code>False</code> otherwise.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "soliton_automata.soliton_classes.soliton_graph.SolitonGraph.create_pysmiles_smiles", "modulename": "soliton_automata.soliton_classes.soliton_graph", "qualname": "SolitonGraph.create_pysmiles_smiles", "kind": "function", "doc": "<p>Transforms user input in <code>SMILES</code> representation (treating exterior nodes as Cs now).</p>\n\n<p>Args:\n    user_input (str): User input.</p>\n\n<p>Returns:\n    str: <code>SMILES</code> string (used with <code>pysmiles</code>).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">user_input</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "soliton_automata.soliton_classes.soliton_graph.SolitonGraph.create_rdkit_smiles", "modulename": "soliton_automata.soliton_classes.soliton_graph", "qualname": "SolitonGraph.create_rdkit_smiles", "kind": "function", "doc": "<p>Transforms user input in extra <code>SMILES</code> representation\n    because <code>rdkit</code> needs string without double edges at exterior nodes (otherwise some valence error occurs).</p>\n\n<p>Args:\n    user_input (str): User input.</p>\n\n<p>Returns:\n    str: Modified <code>SMILES</code> string (used with <code>rdkit</code>).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">user_input</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "soliton_automata.soliton_classes.soliton_graph.SolitonGraph.create_binding_dict", "modulename": "soliton_automata.soliton_classes.soliton_graph", "qualname": "SolitonGraph.create_binding_dict", "kind": "function", "doc": "<p>Builds a dictionary that contains the binding type for each edge (1 for single, 2 for double binding).</p>\n\n<p>Returns:\n    dict: Bindings (where the two nodes of the edge are sorted).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "soliton_automata.soliton_classes.soliton_graph.SolitonGraph.next_node_label", "modulename": "soliton_automata.soliton_classes.soliton_graph", "qualname": "SolitonGraph.next_node_label", "kind": "function", "doc": "<p>Finds the next node label for a given node label. Used in initialisation of graph in <code>smiles_to_graph</code>.</p>\n\n<p>Args:\n    node_label (str): Given node label.</p>\n\n<p>Returns:\n    str: Computed (next) node label.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">node_label</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "soliton_automata.soliton_classes.soliton_graph.SolitonGraph.smiles_to_graph", "modulename": "soliton_automata.soliton_classes.soliton_graph", "qualname": "SolitonGraph.smiles_to_graph", "kind": "function", "doc": "<p>Transforms user input into <code>rdkit</code> molecule and then into <code>networkx</code> graph.</p>\n\n<p>Returns:\n    nx.Graph: Graph that visualizes the molecule.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "soliton_automata.soliton_classes.soliton_graph.SolitonGraph.find_double_edge_positions", "modulename": "soliton_automata.soliton_classes.soliton_graph", "qualname": "SolitonGraph.find_double_edge_positions", "kind": "function", "doc": "<p>Builds a dictionary that contains the positions for a second line for each edge.</p>\n\n<p>Returns:\n    dict: Double edge positions.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "soliton_automata.soliton_classes.soliton_graph.SolitonGraph.validate_soliton_graph", "modulename": "soliton_automata.soliton_classes.soliton_graph", "qualname": "SolitonGraph.validate_soliton_graph", "kind": "function", "doc": "<p>Checks if graph is a soliton graph.</p>\n\n<p>Returns:\n    list: All the problems that keep the graph from being a soliton graph.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "soliton_automata.soliton_classes.soliton_graph.SolitonGraph.find_rings", "modulename": "soliton_automata.soliton_classes.soliton_graph", "qualname": "SolitonGraph.find_rings", "kind": "function", "doc": "<p>Finds all rings in the soliton graph.</p>\n\n<p>Returns:\n    list: All rings with entrance node as first and last node.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "soliton_automata.soliton_classes.soliton_path", "modulename": "soliton_automata.soliton_classes.soliton_path", "kind": "module", "doc": "<p>Soliton path.</p>\n"}, {"fullname": "soliton_automata.soliton_classes.soliton_path.SolitonPath", "modulename": "soliton_automata.soliton_classes.soliton_path", "qualname": "SolitonPath", "kind": "class", "doc": "<p>Representation of a soliton path.</p>\n"}, {"fullname": "soliton_automata.soliton_classes.soliton_path.SolitonPath.__init__", "modulename": "soliton_automata.soliton_classes.soliton_path", "qualname": "SolitonPath.__init__", "kind": "function", "doc": "<p>Initializes a <code>SolitonPath</code> object by using a soliton graph and a path.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">soliton_graph</span><span class=\"p\">:</span> <span class=\"n\">soliton_automata</span><span class=\"o\">.</span><span class=\"n\">soliton_classes</span><span class=\"o\">.</span><span class=\"n\">soliton_graph</span><span class=\"o\">.</span><span class=\"n\">SolitonGraph</span>,</span><span class=\"param\">\t<span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">list</span></span>)</span>"}, {"fullname": "soliton_automata.soliton_classes.soliton_path.SolitonPath.path", "modulename": "soliton_automata.soliton_classes.soliton_path", "qualname": "SolitonPath.path", "kind": "variable", "doc": "<p>Path consisting of node ids.</p>\n", "annotation": ": list"}, {"fullname": "soliton_automata.soliton_classes.soliton_path.SolitonPath.soliton_graph", "modulename": "soliton_automata.soliton_classes.soliton_path", "qualname": "SolitonPath.soliton_graph", "kind": "variable", "doc": "<p>Soliton graph the path was found in.</p>\n", "annotation": ": soliton_automata.soliton_classes.soliton_graph.SolitonGraph"}, {"fullname": "soliton_automata.soliton_classes.soliton_path.SolitonPath.path_labels", "modulename": "soliton_automata.soliton_classes.soliton_path", "qualname": "SolitonPath.path_labels", "kind": "variable", "doc": "<p>Path consisiting of node labels.</p>\n", "annotation": ": list"}, {"fullname": "soliton_automata.soliton_classes.soliton_path.SolitonPath.path_for_user", "modulename": "soliton_automata.soliton_classes.soliton_path", "qualname": "SolitonPath.path_for_user", "kind": "variable", "doc": "<p>Representation of the path as a readable user output.</p>\n", "annotation": ": str"}, {"fullname": "soliton_automata.soliton_classes.soliton_path.SolitonPath.bindings_list", "modulename": "soliton_automata.soliton_classes.soliton_path", "qualname": "SolitonPath.bindings_list", "kind": "variable", "doc": "<p>Bindings for each timestep.</p>\n", "annotation": ": list"}, {"fullname": "soliton_automata.soliton_classes.soliton_path.SolitonPath.resulting_soliton_graph", "modulename": "soliton_automata.soliton_classes.soliton_path", "qualname": "SolitonPath.resulting_soliton_graph", "kind": "variable", "doc": "<p>Soliton graph the traversal of the soliton path results in.</p>\n", "annotation": ": soliton_automata.soliton_classes.soliton_graph.SolitonGraph"}, {"fullname": "soliton_automata.soliton_classes.soliton_path.SolitonPath.adjacency_matrices_list", "modulename": "soliton_automata.soliton_classes.soliton_path", "qualname": "SolitonPath.adjacency_matrices_list", "kind": "variable", "doc": "<p>Adjacency matrices for each timestep.</p>\n", "annotation": ": list"}, {"fullname": "soliton_automata.soliton_classes.soliton_path.SolitonPath.path_representations", "modulename": "soliton_automata.soliton_classes.soliton_path", "qualname": "SolitonPath.path_representations", "kind": "function", "doc": "<p>Creates two representations of a path: One with node labels and one as a string as a readable user output.</p>\n\n<p>Returns:\n    dict: Path with node labels instead of node ids.\n    dict: Representation of the path the user gets as an output.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "soliton_automata.soliton_classes.soliton_path.SolitonPath.find_bindings_for_each_timestep", "modulename": "soliton_automata.soliton_classes.soliton_path", "qualname": "SolitonPath.find_bindings_for_each_timestep", "kind": "function", "doc": "<p>Finds the binding dictionary for each timestep of traversal of a path and the soliton graph the traversal results in.</p>\n\n<p>Returns:\n    list: Contains bindings for each timestep.\n    SolitonGraph: The soliton graph the traversal of the soliton path results in.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "soliton_automata.soliton_classes.soliton_path.SolitonPath.find_adjacency_matrices_for_each_timestep", "modulename": "soliton_automata.soliton_classes.soliton_path", "qualname": "SolitonPath.find_adjacency_matrices_for_each_timestep", "kind": "function", "doc": "<p>Finds the adjacency matrix for each timestep of traversal of a path.</p>\n\n<p>Returns:\n    list: Contains <code>Numpy</code> matrix for each timestep.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "soliton_automata.soliton_classes.traversal", "modulename": "soliton_automata.soliton_classes.traversal", "kind": "module", "doc": "<p>Traversal (= Configuration trail).</p>\n"}, {"fullname": "soliton_automata.soliton_classes.traversal.Traversal", "modulename": "soliton_automata.soliton_classes.traversal", "qualname": "Traversal", "kind": "class", "doc": "<p>Representation of a traversal. Traversal means the paths of all solitons in a burst (alternative representation to configurationtrail).</p>\n"}, {"fullname": "soliton_automata.soliton_classes.traversal.Traversal.__init__", "modulename": "soliton_automata.soliton_classes.traversal", "qualname": "Traversal.__init__", "kind": "function", "doc": "<p>Initializes a <code>Traversal</code> object.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">soliton_graph</span><span class=\"p\">:</span> <span class=\"n\">soliton_automata</span><span class=\"o\">.</span><span class=\"n\">soliton_classes</span><span class=\"o\">.</span><span class=\"n\">soliton_graph</span><span class=\"o\">.</span><span class=\"n\">SolitonGraph</span>,</span><span class=\"param\">\t<span class=\"n\">pos_and_bindings</span><span class=\"p\">:</span> <span class=\"nb\">list</span></span>)</span>"}, {"fullname": "soliton_automata.soliton_classes.traversal.Traversal.soliton_graph", "modulename": "soliton_automata.soliton_classes.traversal", "qualname": "Traversal.soliton_graph", "kind": "variable", "doc": "<p>Soliton graph the traversal was found in.</p>\n", "annotation": ": soliton_automata.soliton_classes.soliton_graph.SolitonGraph"}, {"fullname": "soliton_automata.soliton_classes.traversal.Traversal.pos_and_bindings", "modulename": "soliton_automata.soliton_classes.traversal", "qualname": "Traversal.pos_and_bindings", "kind": "variable", "doc": "<p>Positions and bindings for each timestep.</p>\n", "annotation": ": list"}, {"fullname": "soliton_automata.soliton_classes.traversal.Traversal.pos", "modulename": "soliton_automata.soliton_classes.traversal", "qualname": "Traversal.pos", "kind": "variable", "doc": "<p>Soliton positions of all solitons for each timestep.</p>\n", "annotation": ": list"}, {"fullname": "soliton_automata.soliton_classes.traversal.Traversal.bindings_list", "modulename": "soliton_automata.soliton_classes.traversal", "qualname": "Traversal.bindings_list", "kind": "variable", "doc": "<p>Bindings of the graphs edges for each timestep.</p>\n", "annotation": ": list"}, {"fullname": "soliton_automata.soliton_classes.traversal.Traversal.soliton_num", "modulename": "soliton_automata.soliton_classes.traversal", "qualname": "Traversal.soliton_num", "kind": "variable", "doc": "<p>Number of solitons in this traversal.</p>\n", "annotation": ": int"}, {"fullname": "soliton_automata.soliton_classes.traversal.Traversal.traversal_for_user", "modulename": "soliton_automata.soliton_classes.traversal", "qualname": "Traversal.traversal_for_user", "kind": "variable", "doc": "<p>Representation of the traversal as a readable user output.</p>\n", "annotation": ": list"}, {"fullname": "soliton_automata.soliton_classes.traversal.Traversal.traversal_node_ids", "modulename": "soliton_automata.soliton_classes.traversal", "qualname": "Traversal.traversal_node_ids", "kind": "variable", "doc": "<p>Representation of the traversal as seperate paths as lists of node ids</p>\n", "annotation": ": list"}, {"fullname": "soliton_automata.soliton_classes.traversal.Traversal.adjacency_matrices_list", "modulename": "soliton_automata.soliton_classes.traversal", "qualname": "Traversal.adjacency_matrices_list", "kind": "variable", "doc": "<p>Adjacency matrices for each timestep.</p>\n", "annotation": ": list"}, {"fullname": "soliton_automata.soliton_classes.traversal.Traversal.resulting_soliton_graph", "modulename": "soliton_automata.soliton_classes.traversal", "qualname": "Traversal.resulting_soliton_graph", "kind": "variable", "doc": "<p>Soliton graph the traversal results in.</p>\n", "annotation": ": soliton_automata.soliton_classes.soliton_graph.SolitonGraph"}, {"fullname": "soliton_automata.soliton_classes.traversal.Traversal.split_pos_and_bindings", "modulename": "soliton_automata.soliton_classes.traversal", "qualname": "Traversal.split_pos_and_bindings", "kind": "function", "doc": "<p>Splits the list containing the positions and the bindings for each timestep into two seperate lists.</p>\n\n<p>Returns:\n    list: Soliton positions of all solitons for each timestep.\n    list: Bindings of the graphs edges for each timestep.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "soliton_automata.soliton_classes.traversal.Traversal.traversal_representation", "modulename": "soliton_automata.soliton_classes.traversal", "qualname": "Traversal.traversal_representation", "kind": "function", "doc": "<p>Creates a representation of a traversal that is readable for the user. \nPaths are marked with the corresponding soliton.\nUses '-' if the soliton is not currently in the graph at a specific timestep and otherwise \nnode labels to indicate where the soliton is.\nAlso creates a simple path with just the node ids for each soliton in the traversal.</p>\n\n<p>Returns:\n    list: Representations of soliton paths for each soliton.\n    list: Path with node ids for each soliton.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "soliton_automata.soliton_classes.traversal.Traversal.adjacency_matrices_and_resulting_soliton_graph", "modulename": "soliton_automata.soliton_classes.traversal", "qualname": "Traversal.adjacency_matrices_and_resulting_soliton_graph", "kind": "function", "doc": "<p>Finds the adjacency matrix for each timestep of a traversal.</p>\n\n<p>Returns:\n    list: Contains <code>Numpy</code> matrix for each timestep.\n    SolitonGraph: Soliton graph the traversal results in.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "soliton_automata.soliton_classes.traversal.Traversal.ring_passages", "modulename": "soliton_automata.soliton_classes.traversal", "qualname": "Traversal.ring_passages", "kind": "function", "doc": "<p>How often each ring in the soliton graph is passed.</p>\n\n<p>Returns:\n    dict: Contains the number of ring passages for each ring and soliton.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "soliton_automata.visualisations", "modulename": "soliton_automata.visualisations", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "soliton_automata.visualisations.animation", "modulename": "soliton_automata.visualisations.animation", "kind": "module", "doc": "<p>Animation of a soliton traversing a graph.</p>\n"}, {"fullname": "soliton_automata.visualisations.animation.Animation", "modulename": "soliton_automata.visualisations.animation", "qualname": "Animation", "kind": "class", "doc": "<p>Animations of a soliton/ solitons (displayed as pebbles) traversing a graph.</p>\n"}, {"fullname": "soliton_automata.visualisations.animation.Animation.graph_animation", "modulename": "soliton_automata.visualisations.animation", "qualname": "Animation.graph_animation", "kind": "function", "doc": "<p>Animation of a single soliton traversing a graph. \nUses <code>update</code> function to build all necessary plots and returns animation.</p>\n\n<p>Args:\n    soliton_graph (SolitonGraph): The graph that is traversed.\n    soliton_path (SolitonPath): Path the soliton should traverse in the animation.\nReturns:\n    animation.FuncAnimation: Animation.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">soliton_graph</span><span class=\"p\">:</span> <span class=\"n\">soliton_automata</span><span class=\"o\">.</span><span class=\"n\">soliton_classes</span><span class=\"o\">.</span><span class=\"n\">soliton_graph</span><span class=\"o\">.</span><span class=\"n\">SolitonGraph</span>,</span><span class=\"param\">\t<span class=\"n\">soliton_path</span><span class=\"p\">:</span> <span class=\"n\">soliton_automata</span><span class=\"o\">.</span><span class=\"n\">soliton_classes</span><span class=\"o\">.</span><span class=\"n\">soliton_path</span><span class=\"o\">.</span><span class=\"n\">SolitonPath</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "soliton_automata.visualisations.animation.Animation.graph_animation_multiwave", "modulename": "soliton_automata.visualisations.animation", "qualname": "Animation.graph_animation_multiwave", "kind": "function", "doc": "<p>Animation of multiple solitons traversing a graph. \nUses <code>update</code> function to build all necessary plots and returns animation.</p>\n\n<p>Args:\n    soliton_graph (SolitonGraph): The graph that is traversed.\n    traversal (Traversal): The traversal that contains bindings and soliton positions for each timestep.\nReturns:\n    animation.FuncAnimation: Animation.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">soliton_graph</span><span class=\"p\">:</span> <span class=\"n\">soliton_automata</span><span class=\"o\">.</span><span class=\"n\">soliton_classes</span><span class=\"o\">.</span><span class=\"n\">soliton_graph</span><span class=\"o\">.</span><span class=\"n\">SolitonGraph</span>,</span><span class=\"param\">\t<span class=\"n\">traversal</span><span class=\"p\">:</span> <span class=\"n\">soliton_automata</span><span class=\"o\">.</span><span class=\"n\">soliton_classes</span><span class=\"o\">.</span><span class=\"n\">traversal</span><span class=\"o\">.</span><span class=\"n\">Traversal</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "soliton_automata.visualisations.animation.Animation.list_of_plots_and_arrays", "modulename": "soliton_automata.visualisations.animation", "qualname": "Animation.list_of_plots_and_arrays", "kind": "function", "doc": "<p>Builds a list of plots and plots as arrays for each timestep of soliton traversing a path.</p>\n\n<p>Args:\n    soliton_graph (SolitonGraph): The graph that is traversed.\n    soliton_path (SolitonPath): Path the soliton should traverse in the animation.\nReturns:\n    list: <code>Matplotlib</code> plots and plots as <code>Numpy</code> arrays for each timestep.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">soliton_graph</span><span class=\"p\">:</span> <span class=\"n\">soliton_automata</span><span class=\"o\">.</span><span class=\"n\">soliton_classes</span><span class=\"o\">.</span><span class=\"n\">soliton_graph</span><span class=\"o\">.</span><span class=\"n\">SolitonGraph</span>,</span><span class=\"param\">\t<span class=\"n\">soliton_path</span><span class=\"p\">:</span> <span class=\"n\">soliton_automata</span><span class=\"o\">.</span><span class=\"n\">soliton_classes</span><span class=\"o\">.</span><span class=\"n\">soliton_path</span><span class=\"o\">.</span><span class=\"n\">SolitonPath</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "soliton_automata.visualisations.animation.Animation.list_of_plots_and_arrays_multiwave", "modulename": "soliton_automata.visualisations.animation", "qualname": "Animation.list_of_plots_and_arrays_multiwave", "kind": "function", "doc": "<p>Builds a list of plots and plots as arrays for each timestep of solitons traversing the graph.</p>\n\n<p>Args:\n    soliton_graph (SolitonGraph): The graph that is traversed.\n    traversal (Traversal): The traversal that contains bindings and soliton positions for each timestep.\nReturns:\n    list: <code>Matplotlib</code> plots and plots as <code>Numpy</code> arrays for each timestep.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">soliton_graph</span><span class=\"p\">:</span> <span class=\"n\">soliton_automata</span><span class=\"o\">.</span><span class=\"n\">soliton_classes</span><span class=\"o\">.</span><span class=\"n\">soliton_graph</span><span class=\"o\">.</span><span class=\"n\">SolitonGraph</span>,</span><span class=\"param\">\t<span class=\"n\">traversal</span><span class=\"p\">:</span> <span class=\"n\">soliton_automata</span><span class=\"o\">.</span><span class=\"n\">soliton_classes</span><span class=\"o\">.</span><span class=\"n\">traversal</span><span class=\"o\">.</span><span class=\"n\">Traversal</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "soliton_automata.visualisations.animation.Animation.list_of_pil_images", "modulename": "soliton_automata.visualisations.animation", "qualname": "Animation.list_of_pil_images", "kind": "function", "doc": "<p>Builds a list of <code>PIL</code> images for each timestep of soliton traversing a path/ solitons traversing the graph.</p>\n\n<p>Args:\n    plots_and_arrays (list): <code>Matplotlib</code> plots and plots as <code>Numpy</code> arrays for each timestep. \nReturns:\n    list: <code>PIL</code> images for each timestep in animation.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">plots_and_arrays</span><span class=\"p\">:</span> <span class=\"nb\">list</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "soliton_automata.visualisations.visualisation", "modulename": "soliton_automata.visualisations.visualisation", "kind": "module", "doc": "<p>Visualisation of a soliton graph.</p>\n"}, {"fullname": "soliton_automata.visualisations.visualisation.Visualisation", "modulename": "soliton_automata.visualisations.visualisation", "qualname": "Visualisation", "kind": "class", "doc": "<p>Visualisation of a molecule as a graph.</p>\n"}, {"fullname": "soliton_automata.visualisations.visualisation.Visualisation.visualize_soliton_graph", "modulename": "soliton_automata.visualisations.visualisation", "qualname": "Visualisation.visualize_soliton_graph", "kind": "function", "doc": "<p>Plots a visualisation of a soliton graph.</p>\n\n<p>Args:\n    soliton_graph (SolitonGraph): Soliton graph that should be visualised.\n    bindings (dict): Binding types for each edge in the graph.\n    show (bool): Whether or not the plot should be displayed (use <code>False</code> when using visualisation in animation, use <code>True</code> when using it as a stand-alone visualisation).\n    to_image (bool): Whether or not the plot should be returned as a <code>PIL</code> image.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">soliton_graph</span><span class=\"p\">:</span> <span class=\"n\">soliton_automata</span><span class=\"o\">.</span><span class=\"n\">soliton_classes</span><span class=\"o\">.</span><span class=\"n\">soliton_graph</span><span class=\"o\">.</span><span class=\"n\">SolitonGraph</span>,</span><span class=\"param\">\t<span class=\"n\">bindings</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">show</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>,</span><span class=\"param\">\t<span class=\"n\">to_image</span><span class=\"p\">:</span> <span class=\"nb\">bool</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();